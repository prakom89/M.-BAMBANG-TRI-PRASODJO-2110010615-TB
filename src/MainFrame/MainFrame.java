/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainFrame;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Font;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author ACER
 */

public class MainFrame extends javax.swing.JFrame {
    /**
     * Creates new form java
     */
    public MainFrame() {
        initComponents();
        tampilkanData();  // Memuat data ke dalam JTable saat aplikasi dibuka
        loadAset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtJumlah = new javax.swing.JTextField();
        txtKondisi = new javax.swing.JTextField();
        txtLokasi = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAset = new javax.swing.JTable();
        btnTambahAset = new javax.swing.JButton();
        btnUpdateAset = new javax.swing.JButton();
        btnHapusAset = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtTanggalBeli = new com.toedter.calendar.JDateChooser();
        btnClear = new javax.swing.JButton();
        btnCetakPDF = new javax.swing.JButton();
        cmbAset = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        txtKeterangan = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        menuKategori = new javax.swing.JMenu();
        menuAset = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtLokasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLokasiActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Nama Aset");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Jumlah");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Kondisi");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Lokasi");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Tanggal Transaksi");

        tblAset.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nama Aset", "Jumlah", "Tanggal Transaksi", "Kondisi", "Lokasi", "Keterangan"
            }
        ));
        tblAset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAsetMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAset);

        btnTambahAset.setText("TAMBAH ASET");
        btnTambahAset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahAsetActionPerformed(evt);
            }
        });

        btnUpdateAset.setText("UPDATE ASET");
        btnUpdateAset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateAsetActionPerformed(evt);
            }
        });

        btnHapusAset.setText("HAPUS");
        btnHapusAset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusAsetActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("APLIKASI INVENTARISASI ASET");

        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnCetakPDF.setText("CETAK LAPORAN");
        btnCetakPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCetakPDFActionPerformed(evt);
            }
        });

        cmbAset.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Keterangan");

        txtKeterangan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKeteranganActionPerformed(evt);
            }
        });

        menuKategori.setLabel("Kategori");
        menuKategori.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuKategoriMouseClicked(evt);
            }
        });
        menuKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuKategoriActionPerformed(evt);
            }
        });
        menuBar.add(menuKategori);

        menuAset.setLabel("Aset");
        menuAset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAsetMouseClicked(evt);
            }
        });
        menuBar.add(menuAset);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(0, 381, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtJumlah)
                                    .addComponent(txtKondisi)
                                    .addComponent(txtLokasi)
                                    .addComponent(txtTanggalBeli, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbAset, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtKeterangan))))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnHapusAset, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnTambahAset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdateAset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnCetakPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cmbAset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtJumlah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(txtTanggalBeli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtKondisi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtLokasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtKeterangan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(btnTambahAset, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdateAset, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHapusAset, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCetakPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtLokasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLokasiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLokasiActionPerformed
    
    private void loadAset() {
    try (Connection conn = KoneksiDB.getKoneksi();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery("SELECT id_aset, nama_aset FROM aset")) {

        cmbAset.removeAllItems();
        // Tambahkan item default pertama di ComboBox
        cmbAset.addItem("Pilih Aset");
        while (rs.next()) {
            cmbAset.addItem(rs.getString("nama_aset"));
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data aset: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }
    
    private int getIdAset(String namaAset) {
    try (Connection conn = KoneksiDB.getKoneksi();
         PreparedStatement stmt = conn.prepareStatement("SELECT id_aset FROM aset WHERE nama_aset = ?")) {

        stmt.setString(1, namaAset);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            return rs.getInt("id_aset");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal mendapatkan ID Aset: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    return -1; // Jika aset tidak ditemukan
}
        
    private void btnTambahAsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahAsetActionPerformed
    // Ambil nilai dari form
    String namaAset = (String) cmbAset.getSelectedItem(); // Nama Aset dari ComboBox
    String jumlahStr = txtJumlah.getText().trim();
    String kondisi = txtKondisi.getText().trim();
    String lokasi = txtLokasi.getText().trim();
    java.util.Date tanggalBeliUtil = txtTanggalBeli.getDate(); // Ambil tanggal dari JDateChooser
    String keterangan = txtKeterangan.getText().trim();
    
    // Validasi Nama Aset
    if (cmbAset.getSelectedIndex() == 0 || namaAset.equals("Pilih Aset")) {
        JOptionPane.showMessageDialog(this, "Aset harus dipilih.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validasi Jumlah
    int jumlah = 0;
    try {
        jumlah = Integer.parseInt(jumlahStr);
        if (jumlah <= 0) {
            JOptionPane.showMessageDialog(this, "Jumlah harus lebih besar dari 0.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Jumlah harus berupa angka.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validasi Kondisi
    if (kondisi.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Kondisi tidak boleh kosong.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validasi Lokasi
    if (lokasi.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Lokasi tidak boleh kosong.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validasi Tanggal Beli
    if (tanggalBeliUtil == null) {
        JOptionPane.showMessageDialog(this, "Tanggal beli tidak boleh kosong.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Konversi tanggal ke java.sql.Date
    java.sql.Date tanggalBeli = new java.sql.Date(tanggalBeliUtil.getTime());

    // Ambil ID Aset berdasarkan Nama Aset
    int idAset = getIdAset(namaAset); // Metode untuk mendapatkan ID Aset
    if (idAset == -1) {
        JOptionPane.showMessageDialog(this, "Aset tidak valid.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Proses penyimpanan ke database
    try (Connection conn = KoneksiDB.getKoneksi();
         PreparedStatement stmt = conn.prepareStatement(
         "INSERT INTO transaksi (id_aset, jumlah, tanggal_beli, kondisi, lokasi, keterangan) VALUES (?, ?, ?, ?, ?, ?)")) {

        // Isi parameter query
        stmt.setInt(1, idAset);
        stmt.setInt(2, jumlah);
        stmt.setDate(3, tanggalBeli);
        stmt.setString(4, kondisi);
        stmt.setString(5, lokasi);
        stmt.setString(6, keterangan);

        // Eksekusi query
        stmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Data transaksi berhasil ditambahkan.", "Sukses", JOptionPane.INFORMATION_MESSAGE);

        // Bersihkan form setelah data ditambahkan
        clearForm();
        tampilkanData(); // Refresh data di JTable Transaksi

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal menambahkan data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnTambahAsetActionPerformed

    private void btnUpdateAsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAsetActionPerformed
    // Validasi input
    if (cmbAset.getSelectedItem() == null || txtJumlah.getText().isEmpty() || 
        txtTanggalBeli.getDate() == null || txtKondisi.getText().isEmpty() || 
        txtLokasi.getText().isEmpty() || txtKeterangan.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }
    String idTransaksi = null;
    // Ambil idTransaksi dari baris yang dipilih di JTable
    int selectedRow = tblAset.getSelectedRow();
    if (selectedRow != -1) {
        idTransaksi = tblAset.getValueAt(selectedRow, 0).toString(); // Kolom ID Transaksi
    } else {
        JOptionPane.showMessageDialog(this, "Pilih transaksi yang akan diperbarui.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Ambil data dari form
        String namaAset = cmbAset.getSelectedItem().toString(); // Nama aset dari ComboBox
        int jumlah = Integer.parseInt(txtJumlah.getText()); // Konversi jumlah ke int
        java.util.Date tanggalBeli = txtTanggalBeli.getDate();
        java.sql.Date sqlTanggalBeli = new java.sql.Date(tanggalBeli.getTime());
        String kondisi = txtKondisi.getText();
        String lokasi = txtLokasi.getText();
        String keterangan = txtKeterangan.getText();

        // Ambil ID aset berdasarkan nama aset
        int idAset = getIdAset(namaAset); // Metode untuk mendapatkan ID aset berdasarkan nama
        if (idAset == -1) {
            JOptionPane.showMessageDialog(this, "Aset tidak valid.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Update data aset di database
        try (Connection conn = KoneksiDB.getKoneksi()) {
            // Query update ke tabel transaksi
            String updateAsetQuery = "UPDATE transaksi SET id_aset = ?, jumlah = ?, tanggal_beli = ?, kondisi = ?, lokasi = ?, keterangan = ? WHERE id_transaksi = ?";
            try (PreparedStatement stmt = conn.prepareStatement(updateAsetQuery)) {
                stmt.setInt(1, idAset);
                stmt.setInt(2, jumlah);
                stmt.setDate(3, sqlTanggalBeli);
                stmt.setString(4, kondisi);
                stmt.setString(5, lokasi);
                stmt.setString(6, keterangan);
                stmt.setString(7, idTransaksi);

                int rowsUpdated = stmt.executeUpdate();
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(this, "Data aset berhasil diperbarui.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            
            // Refresh data di JTable
            tampilkanData();
            clearForm();
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Jumlah harus berupa angka.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnUpdateAsetActionPerformed

    private void tblAsetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAsetMouseClicked
    int selectedRow = tblAset.getSelectedRow();  // Ambil baris yang dipilih di JTable
    
    if (selectedRow != -1) {
        // Ambil nilai dari kolom-kolom yang ada di JTable dan set ke komponen input form
        String namaAset = tblAset.getValueAt(selectedRow, 1).toString(); // Kolom Nama Aset
        String jumlah = tblAset.getValueAt(selectedRow, 2).toString(); // Kolom Jumlah
        String tanggalBeliString = tblAset.getValueAt(selectedRow, 3).toString(); // Kolom Tanggal Beli (String)
        String kondisi = tblAset.getValueAt(selectedRow, 4).toString(); // Kolom Kondisi
        String lokasi = tblAset.getValueAt(selectedRow, 5).toString(); // Kolom Lokasi

        // Convert String to java.sql.Date
        java.sql.Date tanggalBeli = null;
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); // Sesuaikan format dengan format yang ada di database
            java.util.Date utilDate = sdf.parse(tanggalBeliString);
            tanggalBeli = new java.sql.Date(utilDate.getTime());
        } catch (ParseException e) {
            e.printStackTrace();  // Menangani error parsing tanggal
        }

        String keterangan = tblAset.getValueAt(selectedRow, 6).toString(); // Kolom Keterangan

        // Set nilai ke form input
        txtJumlah.setText(jumlah);
        txtTanggalBeli.setDate(tanggalBeli);
        txtKondisi.setText(kondisi);
        txtLokasi.setText(lokasi);
        txtKeterangan.setText(keterangan);

        // Pilih nama aset di ComboBox berdasarkan Nama Aset yang ada pada JTable
        setAsetComboBox(namaAset);
    }
    }//GEN-LAST:event_tblAsetMouseClicked

    private void setAsetComboBox(String namaAset) {
    for (int i = 0; i < cmbAset.getItemCount(); i++) {
        // Ambil nama aset dari ComboBox
        String item = cmbAset.getItemAt(i);
        
        // Jika Nama Aset yang ada di ComboBox sama dengan namaAset, pilih item tersebut
        if (item.equals(namaAset)) {
            cmbAset.setSelectedIndex(i);
            break;
        }
    }
    }
    
    private void btnHapusAsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusAsetActionPerformed
            // Periksa apakah ada baris yang dipilih
    int row = tblAset.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "Pilih data aset yang ingin dihapus", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Ambil ID Aset dari tabel
    int idTransaksiAset = (int) tblAset.getValueAt(row, 0); // Kolom pertama adalah ID Aset

    // Konfirmasi penghapusan
    int confirm = JOptionPane.showConfirmDialog(
        this,
        "Apakah Anda yakin ingin menghapus data aset dengan ID: " + idTransaksiAset + "?",
        "Konfirmasi Hapus",
        JOptionPane.YES_NO_OPTION
    );

    // Jika pengguna memilih "Yes"
    if (confirm == JOptionPane.YES_OPTION) {
        try (Connection conn = KoneksiDB.getKoneksi();
             PreparedStatement stmt = conn.prepareStatement("DELETE FROM transaksi WHERE id_transaksi = ?")) {

            // Set parameter ID Aset
            stmt.setInt(1, idTransaksiAset);

            // Eksekusi penghapusan
            int rowsDeleted = stmt.executeUpdate();
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Data aset berhasil dihapus", "Sukses", JOptionPane.INFORMATION_MESSAGE);
            }

            // Refresh tabel setelah penghapusan
            tampilkanData();
            clearForm();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menghapus data aset: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnHapusAsetActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearForm();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCetakPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCetakPDFActionPerformed
        // Nama file output PDF
    String filePath = "Laporan_Transaksi_Aset.pdf";

    // Membuat dokumen PDF
    Document document = new Document() {};
    try {
        // Buat instance PDF Writer
        PdfWriter.getInstance((com.itextpdf.text.Document) document, new FileOutputStream(filePath));

        // Membuka dokumen
        document.open();

        // Tambahkan judul laporan
        document.add(new Paragraph("Laporan Transaksi Aset", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18, Font.BOLD)));
        document.add(new Paragraph(" "));
        document.add(new Paragraph("Tanggal Cetak: " + new java.util.Date()));
        document.add(new Paragraph(" "));

        // Membuat tabel
        PdfPTable table = new PdfPTable(7); // Jumlah kolom tabel
        table.setWidthPercentage(100);

        // Tambahkan header kolom
        table.addCell("ID Transaksi");
        table.addCell("Nama Aset");
        table.addCell("Jumlah");
        table.addCell("Tanggal Beli");
        table.addCell("Kondisi");
        table.addCell("Lokasi");
        table.addCell("Keterangan");

        // Ambil data dari tabel aset
        for (int i = 0; i < tblAset.getRowCount(); i++) {
            table.addCell(tblAset.getValueAt(i, 0).toString()); // ID Transaksi
            table.addCell(tblAset.getValueAt(i, 1).toString()); // Nama Aset
            table.addCell(tblAset.getValueAt(i, 2).toString()); // Jumlah
            table.addCell(tblAset.getValueAt(i, 3).toString()); // Tanggal Beli
            table.addCell(tblAset.getValueAt(i, 4).toString()); // Kondisi
            table.addCell(tblAset.getValueAt(i, 5).toString()); // Lokasi
            table.addCell(tblAset.getValueAt(i, 6).toString()); // Keterangan
        }

        // Tambahkan tabel ke dokumen
        document.add(table);

        // Tampilkan pesan sukses
        JOptionPane.showMessageDialog(this, "Laporan berhasil dicetak ke " + filePath, "Sukses", JOptionPane.INFORMATION_MESSAGE);

    } catch (DocumentException | FileNotFoundException e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        document.close();
    }
    }//GEN-LAST:event_btnCetakPDFActionPerformed

    private void txtKeteranganActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKeteranganActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKeteranganActionPerformed

    private void menuKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuKategoriActionPerformed
    
    }//GEN-LAST:event_menuKategoriActionPerformed

    private void menuKategoriMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuKategoriMouseClicked
    // Menampilkan frame untuk mengelola kategori
    KategoriFrame kategoriFrame = new KategoriFrame();
    kategoriFrame.setVisible(true); // Menampilkan kategori frame
    }//GEN-LAST:event_menuKategoriMouseClicked

    public void updateComboBoxAset() {
    try (Connection conn = KoneksiDB.getKoneksi();
         PreparedStatement stmt = conn.prepareStatement("SELECT nama_aset FROM aset")) {
        
        ResultSet rs = stmt.executeQuery();
        cmbAset.removeAllItems(); // Hapus semua item di ComboBox
        cmbAset.addItem("Pilih Aset"); // Tambahkan item default
        
        while (rs.next()) {
            cmbAset.addItem(rs.getString("nama_aset")); // Tambahkan aset dari database
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memperbarui data aset: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void menuAsetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAsetMouseClicked
    // Menampilkan frame untuk mengelola aset
    AsetFrame asetFrame = new AsetFrame();
    asetFrame.setVisible(true); // Menampilkan kategori frame
    
    // Menambahkan WindowListener untuk menangani event saat frame ditutup
    asetFrame.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosed(java.awt.event.WindowEvent e) {
            // Memperbarui ComboBox di MainFrame setelah FrameAset ditutup
            updateComboBoxAset();
        }
    });
    }//GEN-LAST:event_menuAsetMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }
    
 private void clearForm() {
    cmbAset.setSelectedIndex(0);
    txtJumlah.setText("");
    txtKondisi.setText("");
    txtLokasi.setText("");
    txtTanggalBeli.setDate(null);
    txtKeterangan.setText("");
}
 
// Fungsi untuk menampilkan data dari database ke JTable
    private void tampilkanData() {
    try (Connection conn = KoneksiDB.getKoneksi();
         PreparedStatement stmt = conn.prepareStatement(
                 "SELECT t.id_transaksi, a.nama_aset, t.tanggal_beli, t.jumlah, t.kondisi, t.lokasi, t.keterangan " +
                 "FROM transaksi t " +
                 "JOIN aset a ON t.id_aset = a.id_aset")) {

        ResultSet rs = stmt.executeQuery();
        DefaultTableModel model = (DefaultTableModel) tblAset.getModel();
        model.setRowCount(0); // Hapus semua data di JTable

        while (rs.next()) {
            Object[] row = {
                    rs.getInt("id_transaksi"),
                    rs.getString("nama_aset"),
                    rs.getInt("jumlah"),
                    rs.getDate("tanggal_beli"),
                    rs.getString("kondisi"),
                    rs.getString("lokasi"),
                    rs.getString("keterangan")
                    
            };
            model.addRow(row);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal menampilkan data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCetakPDF;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnHapusAset;
    private javax.swing.JButton btnTambahAset;
    private javax.swing.JButton btnUpdateAset;
    private javax.swing.JComboBox<String> cmbAset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuAset;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuKategori;
    private javax.swing.JTable tblAset;
    private javax.swing.JTextField txtJumlah;
    private javax.swing.JTextField txtKeterangan;
    private javax.swing.JTextField txtKondisi;
    private javax.swing.JTextField txtLokasi;
    private com.toedter.calendar.JDateChooser txtTanggalBeli;
    // End of variables declaration//GEN-END:variables
}
